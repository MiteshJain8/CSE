Merge(left[], right[])
    Initialize an empty array 'merged'
    Initialize pointers i and j to 0
    While i < length(left) and j < length(right)
        If left[i] <= right[j]
            Append left[i] to merged
            Increment i by 1
        Else
            Append right[j] to merged
            Increment j by 1
    Append remaining elements from left[i:] to merged
    Append remaining elements from right[j:] to merged
    Return merged

MergeSort(arr[])
    if length(arr) <= 1
        return arr
    
    mid = length(arr) // 2
    left_half = MergeSort(arr[0:mid])
    right_half = MergeSort(arr[mid:])
    
    return Merge(left_half, right_half)

Design Strategy: Divide and Conquer

T = O(n log n)

S = O(n) due auxiliary array of size (n) to merge the sorted halves
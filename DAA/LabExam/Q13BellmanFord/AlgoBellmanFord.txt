BellmanFord(Graph, source, Vertices):
    dist = array of size Vertices initialized to infinity
    dist[source] = 0

    // Relaxation
    for i = 1 to Vertices-1
        for each edge (u, v) with weight w in Graph
            if dist[v] > dist[u] + w
                dist[v] = dist[u] + w

    // Negative Cycle Detection
    for each edge (u, v) with weight w in Graph
        if dist[v] > dist[u] + w then Negative cycle exists
            Return

    Return dist

Design Strategy: Dynamic Programming

T = O(VÃ—E)

S = O(V)